
void bubble_sort(int a[], int size) { //버블 정렬 O(n2)
	int tmp;
	for (int i = 0; i < size - 1; i++) {
		for (int j = i + 1; j < size; j++) {
			if (a[i] > a[j]) {
				tmp = a[i];
				a[i] = a[j];
				a[j] = tmp;
			}
		}
	}
}

void selection_sort(int a[], int size) { //선택 정렬 O(n2)
	int i, j;
	int max_num;
	int tmp;

	for (i = size; i > 1; i--) {
		max_num = 0;
		for (j = 1; j < i; j++) {
			if (a[max_num] < a[j])
				max_num = j;
		}
		tmp = a[max_num];
		a[max_num] = a[i - 1];
		a[i - 1] = tmp;
	}
}

void insertion_sort(int a[], int size) { //삽입 정렬 O(n2)
	int i, j;
	int tmp;
	for (i = 1; i < size; i++) {
		tmp = a[i];
		j = i - 1;
		while (j >= 0 && a[j] > tmp) {
			a[j + 1] = a[j];
			j = j - 1;
		}
		a[j + 1] = tmp;
	}
}

void merge_sort(int data[], int p, int r) {
	int q;
	if (p < r) {
		q = (p + r) / 2;
		merge_sort(data, p, q);
		merge_sort(data, q + 1, r);
		merge(data, p, q, r);
	}
}

void merge(int data[], int p, int q, int r) { // 합병 정렬 -> 시간복잡도 : n로그n
	int tmp[10];
	int i = p, j = q + 1, k = p;
	while (i <= q && j <= r) {
		if (data[i] <= data[j])
			tmp[k++] = data[i++];
		else
			tmp[k++] = data[j++];
	}
	while (i <= q)
		tmp[k++] = data[i++];
	while (j <= r)
		tmp[k++] = data[j++];
	for (int i = p; i <= r; i++)
		data[i] = tmp[i];
}

<퀵 정렬> 시간복잡도: n로그n , 최악의 경우 n2

void quick_sort1(int arr[], int left, int right) {
	int i = left, j = right;
	int pivot = arr[right];
	int temp;
	do {
		while (arr[i] < pivot)
			i++;
		while (arr[j] > pivot)
			j--;
		if (i <= j) {
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
			i++;
			j--;
		}
	} while (i <= j);

	/* recursion */
	if (left < j)
		quick_sort1(arr, left, j);

	if (i < right)
		quick_sort1(arr, i, right);
}


void quick_sort2(int arr[], int left, int right) {
	int i = left, j = right;
	int mid = (left + right) / 2;
	int pivot;
	int temp;

	if (arr[0] >= arr[left] && arr[0] >= arr[right]) {
		if (arr[left] >= arr[right])
			pivot = arr[left];
		else
			pivot = arr[right];
	}
	else if (arr[left] >= arr[0] && arr[left] >= arr[right]) {
		if (arr[0] >= arr[right])
			pivot = arr[0];
		else
			pivot = arr[right];
	}
	else if (arr[right] >= arr[left] && arr[right] >= arr[0]) {
		if (arr[left] >= arr[0])
			pivot = arr[left];
		else
			pivot = arr[0];
	}

	do {
		while (arr[i] < pivot)
			i++;
		while (arr[j] > pivot)
			j--;
		if (i <= j) {
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
			i++;
			j--;
		}
	} while (i <= j);

	/* recursion */
	if (left < j)
		quick_sort2(arr, left, j);

	if (i < right)
		quick_sort2(arr, i, right);
}

void quick_sort3(int arr[], int left, int right) {
	int i = left, j = right;
	int index = rand() % right;
	int pivot = arr[index];
	int temp;
	do {
		while (arr[i] < pivot)
			i++;
		while (arr[j] > pivot)
			j--;
		if (i <= j) {
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
			i++;
			j--;
		}
	} while (i <= j);

	/* recursion */
	if (left < j)
		quick_sort3(arr, left, j);

	if (i < right)
		quick_sort3(arr, i, right);
}

<힙 정렬>
Heap_Sort(배열, 배열의 크기(MAX), 노드 배열(MAX)) 시간복잡도 n로그n

void array_swap(int arr[], int a, int b) {
	int temp; temp = arr[a];
	arr[a] = arr[b];
	arr[b] = temp;
} 
void Heapify(int * arr, int parent_position, int heap_size) {
	int left, right, largest;
	left = 2 * parent_position + 1;
	right = 2 * parent_position + 2;
	if ((left<heap_size) && (arr[left]>arr[parent_position]))
		largest = left;
	else
		largest = parent_position;
	if ((right<heap_size) && (arr[right]>arr[largest]))
		largest = right;
	if (largest != parent_position) {
		array_swap(arr, parent_position, largest);
		Heapify(arr, largest, heap_size); 
	} 
}

void Build_Heap(int * arr, int length) {
	int parent_position;
	for (parent_position = length / 2 - 1; parent_position >= 0; parent_position--)
		Heapify(arr, parent_position, length);
}

void Heap_Sort(int * arr, int length, int k) {
	Build_Heap(arr, length);
	int last_row;
	int count = 0;
	for (last_row = length - 1; last_row>0; last_row--) {
		if (count == k) break;
		array_swap(arr, 0, last_row);
		length--;
		count++;
		Heapify(arr, 0, length); 
	} 
}

< 오름차순 내림차순 정렬 소스 > C언어 표준 라이브러리

#include <stdio.h>
#include <stdlib.h> // qsort(메모리포인터, 데이터개수, 자료형 크기, 리턴형)

#define NUM 7 

int ascending(const void*, const void*);
int descending(const void*, const void*);
void output(int arr[], int size);

int main(void)
{
	int arr[NUM] = { 10, 14, 2, 40, 23, 12, 42 };
	qsort(arr, NUM, sizeof(int), ascending);
	output(arr, NUM);
	qsort(arr, NUM, sizeof(int), descending);
	output(arr, NUM);

	return 0;
}
// 오름차순
int ascending(const void* a, const void* b)
{
	if (*(int *)a > *(int *)b)
		return 1;
	else if (*(int *)a < *(int *)b)
		return -1;
	else
		return 0;
}
// 내림차순
int descending(const void* a, const void* b)
{
	if (*(int *)a < *(int *)b)
		return 1;
	else if (*(int *)a > *(int *)b)
		return -1;
	else
		return 0;
}

int sort_by_name(const void *v1, const void *v2) { //오름 차순 -> 대소 문자를 반대로 하면 내림차순으로 된다.
	Person *m1 = (Person *)v1;
	Person *m2 = (Person *)v2;
	if (strcmp(m1->name, m2->name) > 0) 
		return 1;
	if (strcmp(m1->name, m2->name) < 0)
		return -1;
	return 0;
}

void output(int arr[], int size)
{
	int i;
	for (i = 0; i<size; i++)
		printf("%d  ", arr[i]);
	printf("\n");
}
